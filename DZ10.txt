Урок 10. Вебинар. Транзакции, переменные, представления. Администрирование. Хранимые процедуры и функции,
 триггеры
Задания на БД vk:
Проанализировать какие запросы могут выполняться наиболее часто в процессе работы приложения и
 добавить необходимые индексы.

группы - CREATE INDEX communities_name_idx ON communities(name);

Фамилии - CREATE INDEX users_last_name_idx ON users(last_name); 

ФИ - CREATE INDEX users_first_name_last_name_idx ON users(first_name, last_name);

город и страна - CREATE INDEX profiles_country_city_idx ON profiles(country, city);  

школа - если бы была в данных - CREATE INDEX profiles_sсhool_idx ON profiles(sсhool);

День рождения - CREATE INDEX profiles_birthday_idx ON profiles(birthday);

текст сообщений - CREATE INDEX messages_body_idx ON messages(body(10));  -- так как ключи, указала №. 

поиск файлов, картинок, видео, музыки - CREATE INDEX media_filename_idx ON media(filename);

поиск файла по размеру - CREATE INDEX media_size_idx ON media(size);
и т.д.

Задание на оконные функции
Построить запрос, который будет выводить следующие столбцы:
имя группы +C
среднее количество пользователей в группах (сумма количестива пользователей во всех группах
делённая на количество групп) +
самый молодой пользователь в группе (желательно вывести имя и фамилию) + 
самый старший пользователь в группе (желательно вывести имя и фамилию) +
количество пользователей в группе +
всего пользователей в системе (количество пользователей в таблице users)
отношение в процентах для последних двух значений (общее количество пользователей в группе /
 всего пользователей в системе) * 100

-- синтаксическая ошибка

SELECT DISTINCT communities.name AS group_name,
  COUNT(communities_users.user_id) OVER() / (SELECT COUNT(*) FROM communities) AS users_in_group,
  (SELECT COUNT(*) FROM users) AS total_users,  
  FIRST_VALUE(CONCAT(users.first_name, ' ',  users.last_name)) OVER(w_communities ORDER BY profiles.birthday DESC) AS young_user_in_group,
  FIRST_VALUE(CONCAT(users.first_name, ' ', users.last_name)) OVER(w_communities ORDER BY profiles.birthday) AS old_user_in_group,
  COUNT(communities_users.user_id) OVER(w_communities) AS users_in_group,
  COUNT(communities_users.user_id) OVER(w_communities) / (SELECT COUNT(*) FROM users) *100 AS '%%'  
    FROM communities
      LEFT JOIN communities_users
        ON communities_users.community_id = communities.id
      LEFT JOIN profiles
        ON profiles.user_id = users.id
      LEFT JOIN users
        ON communities_users.user_id = users.id
      WINDOW w_communities AS (PARTITION BY communities.id);

--  Если разделить, часть 1:

SELECT DISTINCT communities.name AS group_name,
  COUNT(communities_users.user_id) OVER() / (SELECT COUNT(*) FROM communities) AS users_in_group,  
  COUNT(communities_users.user_id) OVER(w_communities) AS users_in_group,
  (SELECT COUNT(*) FROM users) AS total_users, 
  COUNT(communities_users.user_id) OVER(w_communities) / (SELECT COUNT(*) FROM users) *100 AS '%%'  
    FROM communities
      LEFT JOIN communities_users
        ON communities_users.community_id = communities.id
      LEFT JOIN users
        ON communities_users.user_id = users.id
      WINDOW w_communities AS (PARTITION BY communities.id);


--  Если разделить, часть 2:

SELECT DISTINCT communities.name AS group_name,
  FIRST_VALUE(CONCAT(users.first_name, ' ',  users.last_name)) 
   OVER(w_communities ORDER BY profiles.birthday DESC) AS young_user_in_group,
  FIRST_VALUE(CONCAT(users.first_name, ' ', users.last_name)) 
   OVER(w_communities ORDER BY profiles.birthday) AS old_user_in_group,
    FROM communities
      JOIN communities_users
        ON communities_users.community_id = communities.id
      JOIN profiles
        ON profiles.user_id = users.id
      JOIN users
        ON communities_users.user_id = users.id
      WINDOW w_communities AS (PARTITION BY communities.id);




--
