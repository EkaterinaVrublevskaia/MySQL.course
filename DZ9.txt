Практическое задание по теме “Транзакции, переменные, представления”
1.В базе данных shop и sample присутствуют одни и те же таблицы, учебной базы данных. 
Переместите запись id = 1 из таблицы shop.users в таблицу sample.users. Используйте транзакции.

DROP DATABASE IF EXISTS sample;
CREATE DATABASE sample;

use sample

DROP TABLE IF EXISTS users;
CREATE TABLE users(
	id INT(50) NOT NULL AUTO_INCREMENT PRIMARY KEY,
	name VARCHAR(255) NOT NULL,
	birthday_at DATE DEFAULT NULL,
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

START TRANSACTION;
INSERT INTO sample.users SELECT * FROM shop.users WHERE id = 1;
COMMIT;
SELECT * FROM users;

2.Создайте представление, которое выводит название name товарной позиции из таблицы products и 
соответствующее название каталога name из таблицы catalogs.

CREATE VIEW prod_cat_name (prod_id, prod_name, cat_name)
AS SELECT products.id AS prod_id, products.name, cat.name
FROM products
  JOIN catalogs AS cat
    ON products.catalog_id = cat.id;

3.по желанию) Пусть имеется таблица с календарным полем created_at. В ней размещены разряженые 
календарные записи за август 2018 года '2018-08-01', '2016-08-04', '2018-08-16' и 2018-08-17. 
Составьте запрос, который выводит полный список дат за август, выставляя в соседнем поле значение 1, 
если дата присутствует в исходном таблице и 0, если она отсутствует.

-




4.(по желанию) Пусть имеется любая таблица с календарным полем created_at. Создайте запрос, который 
удаляет устаревшие записи из таблицы, оставляя только 5 самых свежих записей.

DROP TABLE IF EXISTS datetable;
CREATE TABLE datetable (
    created_at DATE
);

INSERT INTO datetable VALUES
	('2018-08-01'),
	('2016-08-04'),
	('2018-08-16'),
        ('2018-08-17'),
        ('2018-08-31'),
	('2016-09-21'),
	('2019-03-11'),
        ('2019-01-17'),
	('2019-05-01');

SELECT * FROM datetable ORDER BY created_at DESC;

START TRANSACTION;
SELECT COUNT(*) FROM datetable;
SELECT 10 - 5;
DELETE FROM datetable ORDER BY created_at LIMIT 5;
COMMIT;

SELECT * FROM datetable;


Практическое задание по теме “Администрирование MySQL” (эта тема изучается по вашему желанию)
1.Создайте двух пользователей которые имеют доступ к базе данных shop. Первому пользователю 
shop_read должны быть доступны только запросы на чтение данных, второму пользователю shop —
 любые операции в пределах базы данных shop.
-- Создание пользователей:
DROP USER IF EXISTS 'shop_read'@'localhost';
CREATE USER 'shop_read'@'localhost';
CREATE USER 'shop'@'localhost' IDENTIFIED WITH sha256_password BY 'qwert';

-- Первому пользователю дается доступ только на чтение базы shop:
-- точно не знаю нужно ли убирать доступ. 
--REVOKE ALL ON *.* FROM 'shop_read'@'localhost'; 
GRANT SELECT ON shop.* TO 'shop_read'@'localhost';


-- Второму пользователю даются доступ на люые операции:
--REVOKE ALL ON *.* FROM 'shop'@'localhost';
GRANT ALL ON shop.* TO 'shop'@'localhost';
GRANT GRANT OPTION ON shop.* TO 'shop'@'localhost';

-- Проверка, после того как зашли на пользователя:
SHOW GRANTS;

2.(по желанию) Пусть имеется таблица accounts содержащая три столбца id, name, password, 
содержащие первичный ключ, имя пользователя и его пароль. Создайте представление username таблицы accounts, 
предоставляющий доступ к столбца id и name. Создайте пользователя user_read, который бы не имел доступа 
к таблице accounts, однако, мог бы извлекать записи из представления username.
--
DROP TABLE IF EXISTS accounts;
CREATE TABLE accounts (
	id SERIAL PRIMARY KEY,
	name VARCHAR(100),
	password VARCHAR(100)
);
--
INSERT INTO accounts VALUES
	(NULL, 'Fire', 'qwert'),
	(NULL, 'Homework', '0987'),
	(NULL, 'Lesson', 'ehjr'),
	(NULL, 'Sleep', 'cjy');
--
CREATE VIEW username (id, name)
AS SELECT id, name FROM accounts;
--
DROP USER IF EXISTS 'user_read'@'localhost';
CREATE USER 'user_read'@'localhost';
REVOKE ALL ON *.* FROM 'user_read'@'localhost'; 
GRANT SELECT ON shop.username TO 'user_read'@'localhost';



Практическое задание по теме “Хранимые процедуры и функции, триггеры"
1.Создайте хранимую функцию hello(), которая будет возвращать приветствие, в зависимости от текущего времени
 суток. С 6:00 до 12:00 функция должна возвращать фразу "Доброе утро", с 12:00 до 18:00 функция должна
 возвращать фразу "Добрый день", с 18:00 до 00:00 — "Добрый вечер", с 00:00 до 6:00 — "Доброй ночи".

DROP FUNCTION IF EXISTS hello;
DELIMITER //

CREATE FUNCTION hello ()
RETURNS TINYTEXT NO SQL
BEGIN
  DECLARE hour INT;
  SET hour = HOUR(NOW());
  CASE
    WHEN hour BETWEEN 0 AND 5 THEN
      RETURN "Доброй ночи";
    WHEN hour BETWEEN 6 AND 11 THEN
      RETURN "Доброе утро";
    WHEN hour BETWEEN 12 AND 17 THEN
      RETURN "Добрый день";
    WHEN hour BETWEEN 18 AND 23 THEN
      RETURN "Добрый вечер";
  END CASE;
END//

DELIMITER ;
SELECT NOW(), hello ();


2.В таблице products есть два текстовых поля: name с названием товара и description с его описанием. 
Допустимо присутствие обоих полей или одно из них. Ситуация, когда оба поля принимают неопределенное 
значение NULL неприемлема. Используя триггеры, добейтесь того, чтобы одно из этих полей или оба поля 
были заполнены. При попытке присвоить полям NULL-значение необходимо отменить операцию.

USE shop
DROP TRIGGER IF EXISTS error_null_products;
DELIMITER //

CREATE TRIGGER error_null_products BEFORE INSERT ON products
FOR EACH ROW 
BEGIN
  IF New.name IS NULL AND New.description IS NULL THEN
    SIGNAL SQLSTATE '45000' 
    SET MESSAGE_TEXT = 'NULL';
  END IF;
END//

DELIMITER ;
INSERT INTO products (name, description, price, catalog_id) 
Values (NULL, 'Western Digital WD10EZEX', 3164.00, 2);  
INSERT INTO products (name, description, price, catalog_id) 
Values ( NULL, NULL, 5135, 2); 

INSERT INTO products (name, description, price, catalog_id) 
Values ( 'ASUS Pro P1440FA-FQ3043', 'SSD A-DATA S11 Pro', 35425.00, 2);


3.(по желанию) Напишите хранимую функцию для вычисления произвольного числа Фибоначчи. Числами Фибоначчи 
называется последовательность в которой число равно сумме двух предыдущих чисел. Вызов функции FIBONACCI(10)
 должен возвращать число 55.

-- ФОРМУЛА на которую опиралась:

const double SQRT5 = sqrt(5);
const double PHI = (SQRT5 + 1) / 2;

int fibo(int n){
    return int(pow(PHI, n) / SQRT5 + 0.5);


--

DELIMITER //

DROP FUNCTION IF EXISTS FIBONACCI//

CREATE FUNCTION FIBONACCI(n INT)
RETURNS INT DETERMINISTIC
BEGIN
  DECLARE fib DOUBLE;
  SET fib = SQRT(5);
  RETURN (POW((fib + 1) / 2.0, n) / fib);
END//

-- RETURN (POW((fib + 1) / 2.0, n) / fib + 0.5); -- с 0,5 - погрешность - округляет до 56. 


SELECT FIBONACCI(10)//


